#!/usr/bin/env ruby
# encoding: utf-8

$:.unshift File.expand_path('../../lib',__FILE__)

require 'awesome_print'
require 'colorize'
require 'idm'
require 'groupwise'
require 'thor'
require 'table_print'

class Mcp < Thor
  method_option :mail,
          desc: "the new mail address",
      required: true
  desc 'check',
       'check check the availability of the mail address'
  def check
    idm = Idm.new
    if idm.mail_exist?(mail: options[:mail])
      puts "Existiert"
    else
      puts "Existiert nicht"
    end
  end


  method_option :id,
          desc: "id of the case in the change mail queue",
          type: :numeric,
      required: true
  method_option :mail,
          desc: "the new mail address",
      required: true
  desc 'change',
       'set MAIL as the new mail address for the case with ID'
  def change
    puts "[debug] Aufruf-Parameter Mail: #{options[:mail]}"
    #puts "[debug] Aufruf-Parameter UID:  #{options[:uid]}"

    idm = Idm.new

    change_mail_queue_entry = idm.get_change_mail_queue_entry(id: options[:id].to_i)

    if change_mail_queue_entry.count == 0
      abort "[error] Es gibt keinen Änderungskandidaten mit der angegebenen ID"
    end

    if idm.mail_exist?(mail: options[:mail])
      abort "[error] Mail-Adresse existiert bereits"
    end

    idm.change(id: options[:id].to_i, mail: options[:mail])
    idm.set_change_signature(uid: ENV['USER'], id: options[:id].to_i, mail: options[:mail])

    idm.set_gw_change_task(id: change_mail_queue_entry[0])
  end

  method_option :id,
                desc: 'id of the case to be shown',
                type: :numeric,
                required: true
  desc 'close','close the task without changing anything'
  def close
    idm = Idm.new
    idm.set_change_admin(id: options[:id].to_i, uid: ENV['USER'])
    idm.set_change_mail_queue_task_close(id: options[:id].to_i)
    idm.set_gw_change_task(id: options[:id].to_i)
  end

  method_option :id,
          desc: 'id of the case to be shown',
          type: :numeric,
      required: true
  desc 'show','show detailed infos to a case'
  def show
    idm = Idm.new
    groupwise = Groupwise.new

    queue = idm.get_change_mail_queue

    entry = queue.select{ |e| e[0] == options[:id] }.first
    groupwise_mail = groupwise.get_mail(uid: entry[2])

    if !entry.nil?
      puts ""
      puts "ID                 #{entry[0]}"
      puts "Nutzerkennzeichen: #{entry[2]}"
      puts ""
      puts "Firstname (Old)    #{entry[5]}"
      puts "Lastname (Old)     #{entry[6]}"
      puts ""
      puts "Firstname (New)    #{entry[7]}"
      puts "Lastname (New)     #{entry[8]}"
      puts ""
      puts "Mail (Old)         #{entry[3]}"
      puts "Mail (New)         #{entry[4]}"
      puts "Mail (gwldap)      #{groupwise_mail}"
      puts ""
      puts "Name geändert am   #{entry[11]}"
      puts "Bearbeitungsstatus " + "offen".colorize(:red) if entry[9] == 0
      puts "Bearbeitungsstatus " + "abgeschlossen".colorize(:green) if entry[9] == 1
      puts "Bearbeitet von     #{entry[10]}" if entry[9] == 1
      puts "Bearbeitet am      #{entry[12]}" if entry[9] == 1
      puts ""
    else
      puts "Zu der angegebenen ID gibt es keinen Änderungseintrag!"
    end
  end

  method_option :open,
          desc: "show open tickets only",
          type: :boolean,
      required: false
  method_option :closed,
          desc: "show closed tickets only",
          type: :boolean,
      REQUIRED: false
  method_option :verbose,
          desc: "same functionality with more infos",
          type: :boolean,
      required: false
  desc 'list [--open|--closed]','show all open cases'
  def list
    if true == options[:closed] && true == options[:open]
      abort "[error] please chose either --open or --closed, but not both"
    end

    idm = Idm.new

    queue = idm.get_change_mail_queue
    open = "open".colorize(:red)
    close = "close".colorize(:green)

    if true == options[:closed]
      queue = queue.select{ |r| 1 == r[9] }
    end

    if true == options[:open]
      queue = queue.select{ |r| 0 == r[9] }
    end

    if options[:verbose]
      records = queue.reduce([]) do |acc, queue_entry|
        acc << {
          id: queue_entry[0],
          uid: queue_entry[2],
          firstname_old: queue_entry[5],
          lastname_old:  queue_entry[6],
          firstname_new: queue_entry[7],
          lastname_new:  queue_entry[8],
          mail:      queue_entry[3],
          closed_by: queue_entry[10],
          status: queue_entry[9] == 1 ? close : open
        }
      end
    else
      records = queue.reduce([]) do |acc, queue_entry|
        acc << {
          id: queue_entry[0],
          uid: queue_entry[2],
          firstname_new: queue_entry[7],
          lastname_new:  queue_entry[8],
          mail: queue_entry[3],
          status: queue_entry[9] == 1 ? close : open
        }
      end
    end

    tp records
  end
end

Mcp.start
