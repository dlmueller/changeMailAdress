#!/usr/bin/env ruby
# encoding: utf-8

$:.unshift File.expand_path('../../lib',__FILE__)

require 'dotenv'
Dotenv.load

require 'awesome_print'
require 'colorize'
require 'thor'
require 'table_print'

# own libraries
require 'conventions'
require 'idm'
require 'groupwise'

class Mcp < Thor
  method_option :mail,
          desc: "the new mail address",
      required: true
  desc 'check',
       'check check the availability of the mail address'
  def check
    idm = Idm.new
    if idm.mail_exist?(mail: options[:mail])
      puts "Existiert"
    else
      puts "Existiert nicht"
    end
  end

  method_option :id,
                desc: "id of the case in the change mail queue",
                type: :numeric,
                required: true
  desc 'reopen',
       'reopen a closed ticket'
  def reopen

    idm = Idm.new

    if false == idm.change_mail_queue_ticket_exist?(id: options[:id])
      abort "[error] Es existiert kein Ticket mit der Ticket-ID #{options[:id]}"
    end

    if 1 != idm.change_mail_queue_ticket_status(id: options[:id])
      abort "[error] Das Ticket mit der Ticket-ID #{options[:id]} ist nicht geschlossen!"
    end

    idm.reopen_change_mail_queue_ticket(id: options[:id])

    if 0 != idm.change_mail_queue_ticket_status(id: options[:id])
      abort "[error] Das Ticket konnte nicht erneut geöffnet werden!"
    end

    puts "Das Ticket wurde erfolgreich wieder geöffnet!"

  end


  method_option :id,
          desc: "id of the case in the change mail queue",
          type: :numeric,
      required: true
  method_option :mail,
          desc: "the new mail address",
      required: true
  desc 'change',
       'set MAIL as the new mail address for the case with ID'
  def change
    puts "[debug] Aufruf-Parameter Mail: #{options[:mail]}"
    #puts "[debug] Aufruf-Parameter UID:  #{options[:uid]}"

    idm = Idm.new

    change_mail_queue_entry = idm.get_change_mail_queue_entry(id: options[:id].to_i)

    if change_mail_queue_entry.count == 0
      abort "[error] Es gibt keinen Änderungskandidaten mit der angegebenen ID"
    end

    if idm.mail_exist?(mail: options[:mail])
      abort "[error] Mail-Adresse existiert bereits"
    end

    idm.change(id: options[:id].to_i, mail: options[:mail])
    idm.set_change_signature(uid: ENV['USER'], id: options[:id].to_i, mail: options[:mail])

    idm.set_gw_change_task(id: change_mail_queue_entry[0])
  end

  method_option :id,
                desc: 'id of the case to be closed',
                type: :numeric,
                required: true
  desc 'close','close the task without changing anything'
  def close
    idm = Idm.new
    idm.set_change_admin(id: options[:id].to_i, uid: ENV['USER'])
    idm.set_change_mail_queue_task_close(id: options[:id].to_i)
    idm.set_gw_change_task(id: options[:id].to_i)
  end
  
  method_option :id,
          desc: 'id of the case to be shown',
          type: :numeric,
      required: true
  desc 'show','show detailed infos to a case'
  def show
    idm = Idm.new
    groupwise = Groupwise.new
    conv = Conventions.new

    queue = idm.get_change_mail_queue

    entry = queue.select{ |e| e[0] == options[:id] }.first

    # der betreffende Queue-Eintrag koennte mittlerweile geloescht worden sein
    if entry.nil? 
      abort("Queue-Eintrag nicht (mehr?) vorhanden.")
    end
 
    groupwise_mail = groupwise.get_mail(uid: entry[2])

    changeid = entry[0]
    userid = entry[1]
    nkz = entry[2]

    old_mail = entry[3]
    old_firstname = entry[5]
    old_lastname = entry[6]

    new_mail = entry[4]
    new_firstname = entry[7]
    new_lastname = entry[8]

    mailold_firstname = old_mail.split(".").first
    mailold_domainname = old_mail.split("@").last

    proposed_mail = conv.get_proposed_mailaddress(entry)
    proposed_action = conv.get_proposed_action(entry, groupwise, idm)
   
    if !entry.nil?
      puts ""
      puts "ID                 #{changeid}"
      puts "Nutzerkennzeichen: #{nkz}"
      puts "Account-Typ:       #{idm.get_account_type(uid_number: userid)}"
      puts "Account-Status:    #{idm.get_account_state(uid_number: userid)}"
      puts ""
      puts "Firstname (Old)    #{old_firstname}"
      puts "Lastname (Old)     #{old_lastname}"
      puts ""
      puts "Firstname (New)    #{new_firstname}"
      puts "Lastname (New)     #{new_lastname}"
      puts ""
      puts "Mail (Old)         #{old_mail}"
      puts "Mail (New)         #{new_mail}"
      puts "Mail (gwldap)      #{groupwise_mail}"
      puts "Mail (proposed)    #{proposed_mail}"
      puts ""
      if proposed_action == 'CLOSE' 
        theColor = :green
      else 
        theColor = :red
      end
      puts "proposed action:   " + "#{proposed_action}".colorize(theColor)
      puts ""
      puts "Name geändert am   #{entry[11]}"
      puts "Bearbeitungsstatus " + "offen".colorize(:red) if entry[9] == 0
      puts "Bearbeitungsstatus " + "abgeschlossen".colorize(:green) if entry[9] == 1
      puts "Bearbeitet von     #{entry[10]}" if entry[9] == 1
      puts "Bearbeitet am      #{entry[12]}" if entry[9] == 1
      puts ""
    else
      puts "Zu der angegebenen ID gibt es keinen Änderungseintrag!"
    end
  end

  method_option :open,
          desc: "show open tickets only",
          type: :boolean,
      required: false
  method_option :closed,
          desc: "show closed tickets only",
          type: :boolean,
      REQUIRED: false
  method_option :verbose,
          desc: "same functionality with more infos",
          type: :boolean,
      required: false
  desc 'list [--open|--closed]','show all open cases'
  def list
    if true == options[:closed] && true == options[:open]
      abort "[error] please chose either --open or --closed, but not both"
    end

    idm = Idm.new
    groupwise = Groupwise.new
    conv = Conventions.new
    
    queue = idm.get_change_mail_queue
    open = "open".colorize(:red)
    close = "close".colorize(:green)

    if true == options[:closed]
      queue = queue.select{ |r| 1 == r[9] }
    end

    if true == options[:open]
      queue = queue.select{ |r| 0 == r[9] }
    end

    if options[:verbose]
      records = queue.reduce([]) do |acc, queue_entry|
        acc << {
          id: queue_entry[0],
          uid: queue_entry[2],
          firstname_old: queue_entry[5],
          lastname_old:  queue_entry[6],
          firstname_new: queue_entry[7],
          lastname_new:  queue_entry[8],
          mail:      queue_entry[3],
          proposed_mail: conv.get_proposed_mailaddress(queue_entry),
          proposed_action: conv.get_proposed_action(queue_entry, groupwise, idm),
          closed_by: queue_entry[10],
          status: queue_entry[9] == 1 ? close : open,
          type: idm.get_account_type(uid_number: queue_entry[1]),
          state: idm.get_account_state(uid_number: queue_entry[1])
        }
      end
    else
      records = queue.reduce([]) do |acc, queue_entry|
        acc << {
          id: queue_entry[0],
          uid: queue_entry[2],
          firstname_new: queue_entry[7],
          lastname_new:  queue_entry[8],
          mail: queue_entry[3],
          proposed_mail: conv.get_proposed_mailaddress(queue_entry),
          proposed_action: conv.get_proposed_action(queue_entry, groupwise, idm),
          status: queue_entry[9] == 1 ? close : open,
          type: idm.get_account_type(uid_number: queue_entry[1]),
          state: idm.get_account_state(uid_number: queue_entry[1])
        }
      end
    end

    tp records
  end

=begin
  method_option :from,
          desc: "change id to start with",
          type: :numeric,
      required: true
  method_option :to,
          desc: "change id where to stop",
          type: :numeric,
      required: true
  desc 'iter','iterate through the open cases between the boundaries'
  def iter


    idm = Idm.new
    groupwise = Groupwise.new
    conv = Conventions.new

    queue = idm.get_change_mail_queue
    open = "open".colorize(:red)
    close = "close".colorize(:green)

    #if true == options[:open]
    queue = queue.select{ |r| 0 == r[9] }
   
    
    from_id = options[:from]
    to_id = options[:to]
    puts "from #{from_id} to #{to_id}"
    (from_id .. to_id).each do |n|

      entry = queue.select{ |e| e[0] == options[n] }.first
      #groupwise_mail = groupwise.get_mail(uid: entry[2])
      
      puts "  #{n} closed = #{entry[9]}"
    end
    
  end
=end

end

Mcp.start
