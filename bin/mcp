#!/usr/bin/env ruby
# encoding: utf-8

$:.unshift File.expand_path('../../lib',__FILE__)

require 'awesome_print'
require 'idm'
require 'thor'
require 'table_print'

class Mcp < Thor
  desc 'check [MAIL]',
       'check [MAIL] check the availability of the mail address'
  def check(mail)
    idm = Idm.new
    if idm.mail_exist?(mail: mail)
      puts "Existiert"
    else
      puts "Existiert nicht"
    end
  end


  method_option :uid,
          desc: "UID of the account",
      required: true
  method_option :mail,
          desc: "the new mail address",
      required: true
  desc 'change',
       'set MAIL as the new mail address for the account of UID'
  def change
    puts "[debug] Aufruf-Parameter Mail: #{options[:mail]}"
    puts "[debug] Aufruf-Parameter UID:  #{options[:uid]}"

    idm = Idm.new

    if idm.uid_not_exist?(uid: options[:uid])
      abort "[error] Account existiert nicht!"
    end

    if idm.mail_exist?(mail: options[:mail])
      abort "[error] Mail-Adresse existiert bereits"
    end

    idm.change(uid: options[:uid], mail: options[:mail])

    if idm.verify?(uid: options[:uid], mail: options[:mail])
      puts "[success] Adresse erfolgreich geändert"
    else
      puts "[error] Adressänderung wurde nicht durchgeführt"
    end
  end

  method_option :verbose,
          desc: "same functionality with more infos",
          type: :boolean,
      required: false
  desc 'list','show all open cases'
  def list
    idm = Idm.new

    queue = idm.getChangeMailQueue

    if options[:verbose]
      records = queue.reduce([]) do |acc, queue_entry|
        acc << {
          id: queue_entry[0],
          firstname_old: queue_entry[4],
          lastname_old:  queue_entry[5],
          firstname_new: queue_entry[6],
          lastname_new:  queue_entry[7],
          mail:      queue_entry[2]
        }
      end
    else
      records = queue.reduce([]) do |acc, queue_entry|
        acc << {
          id: queue_entry[0],
          firstname: queue_entry[4],
          lastname:  queue_entry[5],
          mail:      queue_entry[2]
        }
      end
    end

    tp records
  end
end

Mcp.start
